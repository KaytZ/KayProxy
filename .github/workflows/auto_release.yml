name: release KayProxy
on:
#   repository_dispatch:
#   workflow_dispatch:
#     inputs:
#       ssh:
#         description: 'SSH connection to Actions'
#         required: true
#         default: 'false'
  push:
    tags:
      - "0*"
  watch:
    types: started
jobs:
  build_luci:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@main

      - name: set git identity
        run: |
          git config --global user.email "kaytz@foxmail.com"
          git config --global user.name "Kay.Chen"
      - name: init environment
        run: |
          sudo -E apt-get -y install upx
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15.3
        id: go
      - name: get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
             curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
             dep ensure
          fi
          go env
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: build
        run: |
          CurrentVersion=${{ github.ref }}
          CurrentVersion=${CurrentVersion/'refs/tags/'/''}
          Project=github.com/Kaytz/KayProxy
          Path="$Project/version"
          ExecName="KayProxy"
          GitCommit=$(git rev-parse --short HEAD || echo unsupported)
          GoVersion=$(go version)
          BuildTime=$(TZ=UTC-8 date "+%Y-%m-%d %H:%M:%S")
          platforms=("linux/arm" "linux/amd64" "linux/arm5" "linux/arm6" "linux/arm7" "linux/mipsle" "linux/mips" "linux/mipsle-softfloat" "linux/mips-softfloat" "linux/386")
          #platforms=("windows/amd64" "darwin/amd64")
          buildGo() {
           GOOS=$1
           GOARCH=$2
           GOARM=""
           GOMIPS=""
           output_name=$ExecName
           suffix=""
           TargetDir=bin/$GOOS/$GOARCH
           if [ $GOOS = "windows" ]; then
             output_name+='.exe'
           fi
           if [ $GOARCH = "arm5" ]; then
               GOARCH="arm"
               GOARM="GOARM=5"
               suffix="5"
           elif [ $GOARCH = "arm6" ]; then
               GOARCH="arm"
               GOARM="GOARM=6"
               suffix="6"
           elif [ $GOARCH = "arm7" ]; then
               GOARCH="arm"
               GOARM="GOARM=7"
               suffix="7"
           fi
           if [ $GOARCH = "mipsle-softfloat" ]; then
               GOARCH="mipsle"
               GOMIPS="GOMIPS=softfloat"
               suffix="-softfloat"
           elif [ $GOARCH = "mips-softfloat" ]; then
               GOARCH="mips"
               GOMIPS="GOMIPS=softfloat"
               suffix="-softfloat"
           fi
           echo "Building($GOOS-$GOARCH-$suffix)..."
           echo $GOMIPS $GOARM
           #cd /opt/hostedtoolcache/go/1.15.3/x64/src
           #echo CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH ./make.bash
           #CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH ./make.bash
           #cd /home/runner/work/KayProxy/KayProxy/
           echo CGO_ENABLED=0 $GOARM $GOMIPS GOOS=$GOOS GOARCH=$GOARCH GOPROXY=https://goproxy.io go build -ldflags "-X '$Path.Version=$CurrentVersion' -X '$Path.BuildTime=$BuildTime' -X '$Path.GoVersion=$GoVersion' -X '$Path.GitCommit=$GitCommit' -X '$Path.ExGoVersionInfo=$suffix' -w -s" -o $TargetDir/$output_name
           CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH GOPROXY=https://goproxy.io go build -ldflags "-X '$Path.Version=$CurrentVersion' -X '$Path.BuildTime=$BuildTime' -X '$Path.GoVersion=$GoVersion' -X '$Path.GitCommit=$GitCommit' -X '$Path.ExGoVersionInfo=$suffix' -w -s" -o $TargetDir/$output_name
           if [ $? -ne 0 ]; then
              echo 'An error has occurred! Aborting the script execution...'
              exit 1
           fi
           echo "Upxing..."
           upx --lzma --best $TargetDir/$output_name
           cp -rf key/ca.crt $TargetDir/
           cp -rf key/server.key $TargetDir/
           cp -rf key/server.crt $TargetDir/
           cp -rf key/createCertificate.sh $TargetDir/
           ZipName=$ExecName"-"$GOOS"-"$GOARCH"$suffix"
           zip -j -q -r  $TargetDir/$ZipName.zip $TargetDir
           cp $TargetDir/$ZipName.zip bin/releaseUpload/
          }
          rm -rf bin/
          mkdir -p bin/releaseUpload
          mkdir -p key
          cp ./createCertificate.sh key
          cd key
          ./createCertificate.sh
          cd ..
          for platform in "${platforms[@]}"; do
           platform_split=(${platform//\// })
           buildGo ${platform_split[0]} ${platform_split[1]}
          done
          echo "--------------------------------------------"
          echo "Version:" $CurrentVersion
          echo "Git commit:" $GitCommit
          echo "Go version:" $GoVersion
          echo "Build Time:" $BuildTime
          echo "Build Finish"
          echo "--------------------------------------------"
      - name: create release and upload asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bin/releaseUpload/*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: "[bot] automatically publish packages compiled with the latest source code"
